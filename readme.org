#+TITLE: Acoustic Beacons

* Overview

The Modem class in ~classes/modem.py~ provides an interface to Delphis subsea acoustic modems.

Multiple nodes form an acoustic telemetry network. Each *node* is a Raspberry Pi with an attached acoustic modem. Nodes are either *active* or *passive*. Passive nodes have known positions, either prescribed or measured with GPS, which are periodically broadcast. Active nodes send ranging pings to passive nodes and estimate their own positions using true-range multilateration.

All nodes contain identical code. When a node starts up, it checks the address of the attached modem and runs using associated parameters from ~config.yaml~. A mode can also be specified from the command line for testing purposes, ignoring the mode in ~config.yaml~.

** Modes
Depending on the specified mode, the node will perform a different task:

*** Operational modes

- Set address (~./beacons.py set xxx~): sets the address of the attached modem to ~xxx~, then exits.

- Active mode (~./beacons.py active~) runs two threads:
  1) Cyclically send range pings to all passive beacons
  2) Parse incoming range returns and broadcasts from passive beacons

- Passive mode (~./beacons.py passive~) runs two threads:
  1) Monitor GPS serial port for position updates
  2) Periodically broadcast current position

*** Testing/debug modes

- Timer mode (~./beacons.py timer P~ or ~./beacons.py timer P xxx~) periodically (with period ~P~) broadcasts (or unicasts to modem ~xxx~) the current time from the node's Raspberry Pi.

- Report mode (~./beacons.py report~) prints all incoming messages.

** Configuration

- Configuration settings are stored in config.yaml

Example:

________________________________________

settings:
  coords: latlon                 # latlon or local - type of coordinates to use
  medium: saltwater              # air, saltwater or freshwater - used to calculate depth from pressure and distance from sound speed
  repeat_rate: 0.2               # seconds
  range_rate: 1.0                # seconds
  broadcast_rate: 10.0           # seconds
  reply_timeout: 1.0             # seconds
  pressure_rate: 1.0             # seconds
  gps_fwd_rate: 1.0              # seconds
  lat0: 44.5
  lon0: -123.3

modems:
  101:
    mode: active                 # active or off
    rov: True                    # True or False
    serial_beacon: /dev/ttyBeacon
  202:
    mode: passive                # passive or off
    x: 0                         # meters from origin
    y: 10                        # meters from origin
    lat: 44.56283
    lon: -123.27878
    z: -1                        # depth (meters)
    serial_beacon: /dev/ttyBeacon
    serial_gps: /dev/ttyAMA0
    vessel: True                 # True or False
    static: True                 # True or False
________________________________________

** Deploying

Copy ~deploy_example.sh~ to ~deploy.sh~ and modify as necessary to copy code to all nodes.

** Multilateration

Each time an active beacon receives a new unit of position information (i.e. a passive beacon location or range), the multilateration solver estimates the active beacon's position.

This process utilizes Scipy's [[https://docs.scipy.org/doc/scipy/reference/optimize.minimize-tnc.html][minimize]] function to numerically minimize the difference between measured ranges and expected ranges given a position estimate. This is a high-level but highly configurable numerical solver, and may require additional tuning for best results.

See [[https://en.wikipedia.org/wiki/True-range_multilateration][true-range multilateration]] on Wikipedia for more information on this class of problem.

* TODO In-progress
- Re-configure timing to switch between a broadcast phase and cyclic ping phase
- Add third beacon class (non-tracking, non-broadcasting) for ranging only
